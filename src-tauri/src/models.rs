// Generated by diesel_ext
#![allow(unused)]
#![allow(clippy::all)]

use bigdecimal::BigDecimal;
use chrono::NaiveDateTime;
use diesel::prelude::*;

use serde::{ Serialize, Deserialize };

use crate::schema::*;

#[derive(Queryable, Selectable, Identifiable, AsChangeset, Serialize, Deserialize, Debug)]
#[diesel(table_name = branch_owner_details)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
pub struct BranchOwnerDetail {
    pub id: i32,
    pub first_name: String,
    pub middle_name: Option<String>,
    pub last_name: String,
    pub legal_business_name: String,
    pub birth_date: Option<NaiveDateTime>,
    pub address1: Option<String>,
    pub address2: Option<String>,
    pub address3: Option<String>,
    pub address4: Option<String>,
    pub state_id: i32,
    pub pin_code: Option<String>,
    pub phone_number: Option<String>,
    pub email_id: Option<String>,
    pub gstin: Option<String>,
    pub fssai: Option<String>,
    pub bank_name: Option<String>,
    pub branch_name: Option<String>,
    pub account_number: Option<String>,
    pub ifsc_code: Option<String>,
    pub account_holder_name: Option<String>,
    pub upi_id: Option<String>,
    pub signatory: Option<Vec<u8>>,
    pub icon: Option<Vec<u8>>,
    pub created_date: Option<NaiveDateTime>,
    pub modified_date: Option<NaiveDateTime>,
    pub is_deleted: Option<bool>,
}

#[derive(Insertable, Serialize, Deserialize, Debug)]
#[diesel(table_name = branch_owner_details)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
pub struct NewBranchOwnerDetail {
    pub first_name: String,
    pub middle_name: Option<String>,
    pub last_name: String,
    pub legal_business_name: String,
    pub birth_date: Option<NaiveDateTime>,
    pub address1: Option<String>,
    pub address2: Option<String>,
    pub address3: Option<String>,
    pub address4: Option<String>,
    pub state_id: i32,
    pub pin_code: Option<String>,
    pub phone_number: Option<String>,
    pub email_id: Option<String>,
    pub gstin: Option<String>,
    pub fssai: Option<String>,
    pub bank_name: Option<String>,
    pub branch_name: Option<String>,
    pub account_number: Option<String>,
    pub ifsc_code: Option<String>,
    pub account_holder_name: Option<String>,
    pub upi_id: Option<String>,
    pub signatory: Option<Vec<u8>>,
    pub icon: Option<Vec<u8>>,
    pub created_date: Option<NaiveDateTime>,
    pub modified_date: Option<NaiveDateTime>,
    pub is_deleted: Option<bool>,
}

#[derive(Queryable, Selectable, Identifiable, Serialize, Deserialize, Debug, Default)]
pub struct FinancialYear {
    pub id: i32,
    pub financial_year: String
}

#[derive(Queryable, AsChangeset, Selectable, Default, Debug)]
#[diesel(table_name = id_sequence)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
pub struct IdSequence {
    pub seq_name: String,
    pub prefix: String,
    pub sec_prefix: String,
    pub seq_number: i32,
    pub created_date: Option<NaiveDateTime>,
    pub modified_date: Option<NaiveDateTime>,
}

#[derive(Insertable, Serialize, Deserialize, Default, Debug)]
#[diesel(table_name = id_sequence)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
pub struct NewIdSequence {
    pub seq_name: String,
    pub prefix: String,
    pub sec_prefix: String,
    pub seq_number: i32,
    pub created_date: Option<NaiveDateTime>,
    pub modified_date: Option<NaiveDateTime>,
}

#[derive(Queryable, Selectable, Identifiable, AsChangeset, Associations, Serialize, Deserialize, Debug)]
#[diesel(belongs_to(InvoiceSummary, foreign_key=invoice_id))]
#[diesel(table_name = invoice_details)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
pub struct InvoiceDetail {
    pub id: i32,
    pub invoice_id: i32,
    pub product_id: i32,
    pub quantity: i32,
    pub unit: Option<String>,
    pub price_per_unit: BigDecimal,
    pub no_of_bags: Option<i32>,
    pub amount: BigDecimal,
    pub tax1: Option<BigDecimal>,
    pub tax2: Option<BigDecimal>,
    pub tax3: Option<BigDecimal>,
    pub total_amount: Option<BigDecimal>,
    pub created_date: Option<NaiveDateTime>,
    pub modified_date: Option<NaiveDateTime>,
    pub is_deleted: Option<bool>,
}

#[derive(Insertable, Serialize, Deserialize, Default, Debug)]
#[diesel(table_name = invoice_details)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
pub struct NewInvoiceDetail {
    pub invoice_id: i32,
    pub product_id: i32,
    pub quantity: i32,
    pub unit: Option<String>,
    pub price_per_unit: BigDecimal,
    pub no_of_bags: Option<i32>,
    pub amount: BigDecimal,
    pub tax1: Option<BigDecimal>,
    pub tax2: Option<BigDecimal>,
    pub tax3: Option<BigDecimal>,
    pub total_amount: Option<BigDecimal>,
    pub created_date: Option<NaiveDateTime>,
    pub modified_date: Option<NaiveDateTime>,
    pub is_deleted: Option<bool>,
}

impl NewInvoiceDetail {
    pub fn from(invoice_detail: &InvoiceDetail) -> Self {
        Self {
            invoice_id: invoice_detail.invoice_id,
            product_id: invoice_detail.product_id,
            quantity: invoice_detail.quantity,
            unit: invoice_detail.unit.clone(),
            price_per_unit: invoice_detail.price_per_unit.clone(),
            no_of_bags: invoice_detail.no_of_bags,
            amount: invoice_detail.amount.clone(),
            tax1: invoice_detail.tax1.clone(),
            tax2: invoice_detail.tax2.clone(),
            tax3: invoice_detail.tax3.clone(),
            total_amount: invoice_detail.total_amount.clone(),
            created_date: None,
            modified_date: None,
            is_deleted: None,
        }
    }
}

#[derive(Queryable, Selectable, Identifiable, AsChangeset, Serialize, Deserialize, Debug)]
#[diesel(table_name = invoice_summary)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
#[diesel(primary_key(invoice_id))]
pub struct InvoiceSummary {
    pub invoice_id: i32,
    pub invoice_number: String,
    pub tax_id: i32,
    pub invoice_date: Option<NaiveDateTime>,
    pub financial_year: String,
    pub vendor_id: i32,
    pub amount: BigDecimal,
    pub pkg_charges: Option<BigDecimal>,
    pub taxable_amount: Option<BigDecimal>,
    pub tax1: Option<BigDecimal>,
    pub tax2: Option<BigDecimal>,
    pub tax3: Option<BigDecimal>,
    pub total_amount: Option<BigDecimal>,
    pub comments: Option<String>,
    pub created_date: Option<NaiveDateTime>,
    pub modified_date: Option<NaiveDateTime>,
    pub is_deleted: Option<bool>,
}

#[derive(Insertable, Serialize, Deserialize, Default, Debug)]
#[diesel(table_name = invoice_summary)]
pub struct NewInvoiceSummary {
    pub invoice_number: String,
    pub tax_id: i32,
    pub invoice_date: Option<NaiveDateTime>,
    pub financial_year: String,
    pub vendor_id: i32,
    pub amount: BigDecimal,
    pub pkg_charges: Option<BigDecimal>,
    pub taxable_amount: Option<BigDecimal>,
    pub tax1: Option<BigDecimal>,
    pub tax2: Option<BigDecimal>,
    pub tax3: Option<BigDecimal>,
    pub total_amount: Option<BigDecimal>,
    pub comments: Option<String>,
    pub created_date: Option<NaiveDateTime>,
    pub modified_date: Option<NaiveDateTime>,
    pub is_deleted: Option<bool>,
}

#[derive(Serialize)]
pub struct SalesInvoiceWithDetails {
    #[serde(flatten)]
    pub summary: InvoiceSummary,
    pub vendor: VendorDetail,
    pub details: Vec<InvoiceDetailsWithProduct>
}

#[derive(Serialize)]
pub struct InvoiceDetailsWithProduct {
    #[serde(flatten)]
    pub invoice_detail: InvoiceDetail,
    #[serde(flatten)]
    pub product_detail: ProductDetail
}

#[derive(Queryable, Selectable, Identifiable, AsChangeset, Serialize, Deserialize, Debug)]
#[diesel(table_name = product_details)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
pub struct ProductDetail {
    #[serde(rename = "product_id")]
    pub id: i32,
    pub short_name: String,
    pub descr: Option<String>,
    pub hsn_sac: String,
    pub price: BigDecimal,
    pub created_date: Option<NaiveDateTime>,
    pub modified_date: Option<NaiveDateTime>,
    pub is_deleted: Option<bool>,
}

#[derive(Insertable, Debug, Serialize, Deserialize, Default)]
#[diesel(table_name = product_details)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
pub struct NewProductDetails {
    pub short_name: String,
    pub descr: Option<String>,
    pub hsn_sac: String,
    pub price: BigDecimal,
    pub created_date: Option<NaiveDateTime>,
    pub modified_date: Option<NaiveDateTime>,
    pub is_deleted: Option<bool>,
}

#[derive(Queryable, Selectable, Serialize, Deserialize, Debug)]
#[diesel(table_name = state_list)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
pub struct StateList {
    pub id: i32,
    pub state_name: String,
    pub tin: String,
    pub iso: String,
    pub capital: String,
    pub vehicle_code: String,
}

#[derive(Queryable, Selectable, AsChangeset, Serialize, Deserialize, Debug)]
#[diesel(table_name = tax_details)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
pub struct TaxDetail {
    pub tax_id: i32,
    pub tax_name1: String,
    pub tax_name2: Option<String>,
    pub tax_name3: Option<String>,
    pub tax_rate1: BigDecimal,
    pub tax_rate2: Option<BigDecimal>,
    pub tax_rate3: Option<BigDecimal>,
    pub financial_year: String,
    pub created_date: Option<NaiveDateTime>,
    pub modified_date: Option<NaiveDateTime>,
    pub is_deleted: Option<bool>
}

#[derive(Insertable, Debug, Serialize, Deserialize, Default)]
#[diesel(table_name = tax_details)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
pub struct NewTaxDetails {
    pub tax_name1: String,
    pub tax_name2: Option<String>,
    pub tax_name3: Option<String>,
    pub tax_rate1: BigDecimal,
    pub tax_rate2: Option<BigDecimal>,
    pub tax_rate3: Option<BigDecimal>,
    pub financial_year: String,
    pub created_date: Option<NaiveDateTime>,
    pub modified_date: Option<NaiveDateTime>,
    pub is_deleted: Option<bool>
}

#[derive(Queryable, Selectable, Identifiable, AsChangeset, Serialize, Deserialize, Debug)]
#[diesel(table_name = vendor_details)]
#[diesel(primary_key(vendor_id))]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
pub struct VendorDetail {
    pub vendor_id: i32,
    pub vendor_name: String,
    pub address1: Option<String>,
    pub address2: Option<String>,
    pub address3: Option<String>,
    pub address4: Option<String>,
    pub state_id: i32,
    pub pin_code: Option<String>,
    pub phone_number: Option<String>,
    pub email_id: Option<String>,
    pub vgstin: Option<String>,
    pub fssai: Option<String>,
    pub bank_name: Option<String>,
    pub branch_name: Option<String>,
    pub account_number: Option<String>,
    pub ifsc_code: Option<String>,
    pub account_holder_name: Option<String>,
    pub created_date: Option<NaiveDateTime>,
    pub modified_date: Option<NaiveDateTime>,
    pub is_deleted: Option<bool>,
}

#[derive(Insertable, Debug, Serialize, Deserialize, Default)]
#[diesel(table_name = vendor_details)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
pub struct NewVendorDetails {
    pub vendor_name: String,
    pub address1: Option<String>,
    pub address2: Option<String>,
    pub address3: Option<String>,
    pub address4: Option<String>,
    pub state_id: i32,
    pub pin_code: Option<String>,
    pub phone_number: Option<String>,
    pub email_id: Option<String>,
    pub vgstin: Option<String>,
    pub fssai: Option<String>,
    pub bank_name: Option<String>,
    pub branch_name: Option<String>,
    pub account_number: Option<String>,
    pub ifsc_code: Option<String>,
    pub account_holder_name: Option<String>,
    pub created_date: Option<NaiveDateTime>,
    pub modified_date: Option<NaiveDateTime>,
    pub is_deleted: Option<bool>,
}
